// Problem 1. There is a 5-digit number that satisfies 4*abcde = edcba, that is, when multiplied by 4 yields the same number read backwards. Write a C-program to find this number.
#include <stdio.h>


int main(void)
{
    int a,b,c,d,e,i;
    i = 10000;
    for (;i < 25000;) // for循环三个条件都要有 开始；范围；递增
    {
        a = (i/10000)%10; // 取余
        b = (i/1000)%10;
        c = (i/100)%10;
        d = (i/10)%10;
        e = i%10;
        
        if (i * 4 == e*10000 + d*1000 + c*100 + b*10 + a)
        {
            printf("%d\n",i);
        }
        i = i+1;

    }


}

// Problem 2. Write a C program to compute the matrix product of two matrices A and B.

//计算list中有几个元素的方法
//可以和create一个不定大小的list的方法结合


#include <stdio.h>

#define M 4   
#define N 4
#define P 4


void matrixmultiply(float a[M][N],float b[N][P],float c[M][P]){
    int i,j,k;
    for (i=0;i<M;i++){
        for (j=0;j<P;j++){
            c[i][j] = 0;
            for (k=0;k<N;k++){
                c[i][j] += a[i][k]*b[k][j];
            }


        }
    }
}

int main(){
    int g;
    float a[M][N] = { {1, 1, 1, 1}, {2, 2, 2, 2}, {3, 3, 3, 3}, {4, 4, 4, 4}}; 
    float b[N][P] = { {1, 1, 1, 1}, {2, 2, 2, 2}, {3, 3, 3, 3}, {4, 4, 4, 4}};
    float c[M][P]; // To store result
    g = sizeof(a[M][N])/sizeof(a[0]); // 计算list中有几个元素的方法
    // N = sizeof(a[M][N])/sizeof(a[0][0])/M; // 计算list中的元素list有几个元素的方法
    // P = sizeof( b[N][P])/sizeof(a[0][0])/N;
    int i,j;

    matrixmultiply(a,b,c);
    printf("result is \n");
    for (i=0; i<M; i++){
        for (j=0; j<P; j++){
            printf("%f",c[i][j]);
            printf("\n");
        }
    }
}


// Problem 3. Write a C program that outputs, in alphabetical order, all the distinct strings that use each of the characters 'c', 'a', 't', 'd', 'o', 'g' exactly once. How many strings does the program generate?

// 每一位的时候检测重复
#include <stdio.h> 

int main(void) {
    char catdog[] = { 'a','c','d','g','o','t' };
    int count = 0;
    int i, j, k, l, m, n;
    i = j = k = l = m = n = 0;
    for (i=0; i<6; i++){
        for (j=0; j<6; j++){
            if (j != i){
                for (k=0; k<6; k++){
                    if (k != j && k != i){
                        for (l=0; l<6; l++){
                            if (l != k && l != j && l != i){
                                for (m=0; m<6; m++){
                                    if (m != l && m != k && m != j && m != i){
                                        for (n=0; n<6; n++){
                                            if (n != m && n != l && n != k && n != j && n != i){
                                                printf("%c%c%c%c%c%c\n", catdog[i], catdog[j], catdog[k], catdog[l], catdog[m], catdog[n]);
                                                count++;
                                                

                                            }
                                                
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

            }
                
                

        }
        

    }
    printf("%d\n", count); 
    return 0;
}


// 全部生成，最后按位去掉所有重复的
#include <stdio.h> 

int main(void) {
    char catdog[] = { 'a','c','d','g','o','t' };
    int count = 0;
    int i, j, k, l, m, n;
    i = j = k = l = m = n = 0;
    for (i=0; i<6; i++) 
        for (j=0; j<6; j++) 
            for (k=0; k<6; k++) 
                for (l=0; l<6; l++) 
                    for (m=0; m<6; m++) 
                        for (n=0; n<6; n++) 
                            if (i!=j && i!=k && i!=l && i!=m && i!=n && j!=k && j!=l && j!=m && j!=n && k!=l && k!=m && k!=n && l!=m && l!=n && m!=n) { 
                                printf("%c%c%c%c%c%c\n", catdog[i], catdog[j], catdog[k], catdog[l], catdog[m], catdog[n]);
                                count++;
                            }
    printf("%d\n", count); 
    return 0;
}

// Problem 4. Write a C function that takes a positive integer n as argument and outputs a series of numbers according to the following process, until 1 is reached: 
// • If n is even, set n to n/2
// • If n is odd, set n to 3*n+1

#include <stdio.h>

void count(int n){
    printf("%d\n",n);
    while (n != 1){
        if (n%2 == 0)
            n = n/2;
        else
            n = n*3 +1;
    
    printf("%d\n",n);
    }
}

int main(){
    int n = 5;
    count(n);
    return 1;
}

// Problem5 You may assume that individual stops (such as "Anzac Pde D opp UNSW") require no more than 31 characters.
// Determine the memory requirements of your data structure, assuming that each integer and floating point number takes 4 bytes.
// If you want to store millions of records, how would you improve your data structure?


// 结构体的定义模式 typedef 和直接 struct 定义是不同的
// typedef是把最后的名字当作这个struct的代号
// 只有struct的定义使用的时候要重申最后名字是一个struct


typedef struct
{
    /* data */
    int day,month,year;
}DateT;

typedef struct 
{
    /* data */
    int hour,minute;

}TimiT;

typedef struct 
{
    /* data */
    int transaction;
    char weekday[4]; // 3字符和 结尾\0
    DateT date;
    TimiT time;
    char mode;
    char from[32],to[32];//details
    int journey;
    char faretext[12];
    float fare,discount,amount;

}JourneyT;


// Problem6 Problem 6. The Fibonacci numbers are defined as follows: Fib(1) = 1 Fib(2) = 1 Fib(n) = Fib(n-1)+Fib(n-2) for n≥3
// Write a C program fibonacci.c that applies the process described in Q4 to the first 10 Fibonacci numbers. The output of the program should begin with 
// Fib[1] = 1
// 1


#include <stdio.h>

void count(int n){
    printf("%d\n",n);
    while (n != 1){
        if (n%2 == 0)
            n = n/2;
        else
            n = n*3 +1;
    
    printf("%d\n",n);
    }
}


int main(void){
    int fib[10] = {1,1};  // 建立一个数组安置fib数列
    int i;
    for (i=2; i<10;i++)
        fib[i] = fib[i-1] + fib[i-2];

    for (i=0; i<10; i++){
        printf("Fib[%d] = %d\n", i+1, fib[i]);
        count (fib[i]);
    }
    return 0;
}

// Problem 7. Write a C function that takes 3 integers as arguments and returns the largest of them. Your C function cannot use any control construct.

#include <stdio.h>

int a=5;
int b=8;
int c=10;

int main(void){
    int d;
    d = b*(a<=b)+a*(a>b);  // b乘上大小判断条件，如果条件是true的时候条件结果值是1，从而让代码结果变成其中较大的数
    c = c*(c>=d)+d*(d>c);
    return c;
    
}


// Problem 8. Write a C program that takes a sequence of integers from the keyboard, sorts them, and displays the sorted sequence on the screen,
// one integer per line. A non-integer indicates the end of sequence.


#include <stdio.h> 
#define SIZE 250


void sort(int list[],int n){
    int i;
    
    
    
    for (i=1; i<n; i++){  // 从第二个元素开始检测这个是否比前面元素都大
        int j = i - 1;
        int element = list[i];
        while (j >= 0 && list[j] > element){ // 如果比前面紧邻的那个小，则去检测更前面一个 **=影响是否能完成排序
            list[j+1] = list[j]; //把当前紧邻的向后挪动腾出位置
            j--;

        }
        list[j+1] = element; //如果比前一个大，那么就放在当前位置
    }

}

int main(void){
    int list[SIZE];
    int recieve;
    int i=0;

    while (1)
    {
        if (i == SIZE -1) // 留最后\0位
            break;
        printf("input\n");
        recieve = scanf("%d", &list[i]); //检测到数字放入地址
        printf("number[%d]=%d\n", i, list[i]);
        if (recieve<=0)
            break;
        else
            i++;
    }
    sort(list,i);
    int j;
    for (j=0; j<i; j++)
        printf("%d\n", list[j]);
    return 0;


    
}



#include <stdio.h> 
#define SIZE 250
void insertionSort(int array[], int n) 
{ 
    int i; 
    for (i = 1; i < n; i++) { 
        int element = array[i];
// for this element ...
        int j = i-1; 
        while (j >= 0 && array[j] > element) { // ... work down the ordered list 
            array[j+1] = array[j]; 
            j--;
// ... moving elements up 
        } 
        array[j+1] = element; 
    } 
        
}
int main(void) { 
    int numbers[SIZE]; 
    int i, n=0; 
    int done=1,rev;
    while (done) // Initialize the array numbers[] by receiving integers from keyboard 
    {
        if (n==SIZE-1) 
            break;
        printf("Type in a number \n"); 
        rev=scanf("%d", &numbers[n]); 
        printf("numbers[%d]=%d\n", n, numbers[n]); 
        if (rev<=0) // not an integer 
            done=0;
        else n++; 
    }

    insertionSort(numbers, n); 
    for (i = 0; i <n; i++) 
        printf("%d\n", numbers[i]);
    return 0;
}











