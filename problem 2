// Problem 1. Explain what is wrong with this function. Rewrite the function so that it correctly achieves the intended result using malloc().

// The function is erroneous because the array arr will cease to exist after the line return arr, 
// since arr is local to this function and gets destroyed once the function returns. 
// So the caller will get a pointer to something that doesn't exist anymore, and you will start to see garbage, segmentation faults, and other errors.

// 在函数内部的 局部变量 array 在函数结束后会被销毁， return的会是一个 指向已经不存在的东西的指针， 会造成error。

int *makearray() //函数名加* 表示返回的是一个指针
{
  int *arr = malloc(10* sizeof(int));
  int i;
  for (i=1; 1<10;i++)
  {
    arr[i]=i;
  }
  return arr;
}


// Problem 2.

void func(int **a)   // 定义内容是一个指向指针的指针， 指针的地址
{
  *a = malloc(sizeof(int)); // 这个指针的地址是申请的空间
}

int main(void)
{
  int *p;
  func(&p);  // 要把指针地址传递给 function
  *p = 6;
  printf("%d\n",*p); 
  free(p);
  return 0;
}


// Problem 3. Write a C-program to compute the first n Fibonacci numbers, print them on the standard output and store them in a dynamic array of 
// unsigned long long int numbers (8 bytes, only positive numbers), where n is given as command line argument. 
// For example, ./fib 60 should result in 1548008755920.



#include <stdio.h> 
#include <stdlib.h>
int main(int argc, char *argv[]) 
{ 
    if (argc != 2) 
    { 
        fprintf(stderr, "Usage: %s number\n", argv[0]); 
        return 1;
    }
    int n = atoi(argv[1]);
    if (n>0)
    {
        unsigned long long int *arr = malloc(n * sizeof(unsigned long long int));
        int i;
        arr[0] = 1;
        arr[1] = 1;
        for (i =2; i<n; i++)
        {
            arr[i] = arr[i-1] + arr[i -2];
        }
        printf("%lld",arr[n-1]); // 不知道为什么 lld无法printf
        free(arr);
    }
    return 0;
}


// Problem 6. Write a C-program called llbuild.c that builds a linked list of integers from user input. The program works as follows:



#include <stdio.h> 
#include <stdlib.h>
#include <assert.h>

typedef struct node
{
    /* data */
    int data;
    struct node *next; // 指向 定义类型的数据 的指针， 可以指向自己的struct类型
    
}NodeT;


NodeT *joinLL(NodeT *head1,NodeT *head2) 
{
    if (head1 == NULL)  
    {
        head1 = head2;
    }
    else
    {   
        NodeT *p = head1; //链表首端等于p 保持首端不变 否则只能找到链表最后一个
        while (p->next != NULL) // 不等于null时 把下一个换成自己
        {
            p = p->next;
        }
        p->next = head2;  // 把新数据挂在最后
    }
    return head1; // 把表头返回
}


NodeT *makeNode(int v)
{
    NodeT *new = malloc(sizeof(NodeT));
    assert(new!=NULL);
    new->data = v;
    new->next = NULL;
    return new;
}

void showLL(NodeT *list)
{
    NodeT *p;
    for (p = list; p != NULL; p = p->next)
    {
        printf("%d",p->data);
        if (p->next != NULL)
        {
            printf("->");
        }
        
    }
    putchar('\n');
}

void freeLL(NodeT *list)
{
    NodeT *p = list;
    while (p!= NULL)
    {
        NodeT *temp = p->next;
        free(p);
        p=temp;
    }
    
}

int main(void)
{
    NodeT *all = NULL;
    int data;
    printf("Enter an integer: ");
    while (scanf("%d", &data)==1) // 判断输入是否符合“”中%的内容
    {
        NodeT *new = makeNode(data);
        all = joinLL(all, new);
        printf("Enter an integer:");
    }
    if (all != NULL)
    {
        printf("Finished. List is ");
        showLL(all);
        freeLL(all);
    }
    else
    {
        printf("Finished.\n");
    }
    return 0;
}


// Problem 7. Extend the C-program in Q6 to split the linked list in two equally-sized halves and output the result. 
// If the list has an odd number of elements, then the first list should contain one more element than the second.



NodeT *splitList(NodeT *head) { // returns pointer to second half a
    assert(head != NULL);
    NodeT *slow = head; 
    NodeT *fast = head->next;   // 画图可以看出来 需要fast先走一位
    while (fast != NULL && fast->next != NULL) {  // 并且在此让fast的下一位不是空，这样fast.next.next 才能是null
        slow = slow->next;
        fast = fast->next->next;
    }   
    NodeT *head2 = slow->next; // this becomes head of second half // 此时 如果奇数slow少跳一位 需要补上
    slow->next = NULL;  // 打断链条
    return head2;
// cut off at end of first half
}

int main(void)
{
    NodeT *all = NULL;
    int data;
    printf("Enter an integer: ");
    while (scanf("%d", &data)==1)
    {
        NodeT *new = makeNode(data);
        all = joinLL(all, new);
        printf("Enter an integer:");
    }
    if (all != NULL)
    {
        printf("Finished. List is ");
        showLL(all);
        NodeT *head2 =  splitList(all);
        showLL(all);
        showLL(head2);
        freeLL(head2);
        freeLL(all);
    }
    else
    {
        printf("Finished.\n");
    }
    return 0;
}











